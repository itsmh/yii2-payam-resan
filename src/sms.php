<?php

namespace itsmh\yii2payamresan;

use itsmh\yii2payamresan\exception\configException;
use itsmh\yii2payamresan\exception\sendException;
use itsmh\yii2payamresan\exception\statusException;
use yii\base\Exception;

class sms extends \yii\base\Widget
{

    /**
     * for mor information about this
     * @see https://www.payam-resan.com/WebService/Manual/WebService%20Manual.pdf
     */
    CONST TYPE_FLASH    = 0;
    CONST TYPE_DEFAULT  = 1;
    CONST TYPE_SIM      = 2;
    CONST TYPE_APP      = 3;

    /**
     * @var string username you have get from registering
     */
    public $username;

    /**
     * @var string password you have get from registering
     */
    public $password;

    /**
     * @var string your sms number provided by the service
     */
    public $sendNumber;

    /**
     * @var string soap url of the provider
     */
    private $_serviceUrl = 'http://sms-webservice.ir/v1/v1.asmx?WSDL';

    /**
     * @var \SoapClient generated at the initialization
     */
    private $_soapClient;


    public function init()
    {
        $this->_soapClient = new \SoapClient($this->_serviceUrl);
        if(!$this->username) {
            throw new configException("username has not been set");
        }
        if(!$this->password) {
            throw new configException("password has not been set");
        }
        if(!$this->sendNumber) {
            throw new configException("sendNumber has not been set");
        }
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * @param string $text text you deserve to send
     * @param string $reception number of reception
     * @param int $smsType type of sms
     * @param int $allowDelay delay time of sending sms ( if cannot be delayed 0 )
     * @throws Exception for soap faults
     * @throws sendException if is unable to send sms
     */
    public function send($text, $reception = NULL, $smsType = self::TYPE_DEFAULT, $allowDelay = 0)
    {
        $parameters['Username'] = $this->username;
        $parameters['PassWord'] = $this->password;
        $parameters['SenderNumber'] = $this->sendNumber;
        $parameters['RecipientNumbers'] = is_array($reception) ? [$reception[0]] : [$reception];
        $parameters['MessageBodie'] = $text;
        $parameters['Type'] = $smsType;
        $parameters['AllowedDelay'] = $allowDelay;
        try {
            $res = $this->_soapClient->SendMessage($parameters);
            if($res->SendMessageResult->long < 0) {
                throw new sendException($res->SendMessageResult->long, $res->SendMessageResult->long);
            } else {
                return $res->SendMessageResult->long;
            }
        }
        catch (SoapFault $ex) {
            throw new Exception($ex);
        }
    }

    public function status($messageId) {
        $parameters['Username'] = $this->username;
        $parameters['PassWord'] = $this->password;
        $parameters['messagesId'] = is_array($messageId) ? [(int)$messageId[0]] : [(int)$messageId];
        try {
            $res = $this->_soapClient->GetMessagesStatus($parameters);
            if($res->GetMessagesStatusResult->long != 4) {
                throw new statusException($res->GetMessagesStatusResult->long, $res->GetMessagesStatusResult->long);
            } else {
                return true;
            }
        }
        catch (SoapFault $ex) {
            throw new Exception($ex);
        }
    }
}
